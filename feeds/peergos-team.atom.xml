<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Peergos - Peergos team</title><link href="https://peergos.gitlab.io/website/" rel="alternate"></link><link href="https://peergos.gitlab.io/website/feeds/peergos-team.atom.xml" rel="self"></link><id>https://peergos.gitlab.io/website/</id><updated>2020-05-11T00:00:00+01:00</updated><entry><title>Keybase has left the building</title><link href="https://peergos.gitlab.io/website/posts/keybase-left-building" rel="alternate"></link><published>2020-05-11T00:00:00+01:00</published><updated>2020-05-11T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2020-05-11:/website/posts/keybase-left-building</id><summary type="html">&lt;p&gt;It's a story that most of us have heard before. You found this cool new service, and you sign up and invest time and energy learning how to use it. Things are great! Then at some point it gets bought or otherwise acquired. There will be promises that the service …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It's a story that most of us have heard before. You found this cool new service, and you sign up and invest time and energy learning how to use it. Things are great! Then at some point it gets bought or otherwise acquired. There will be promises that the service will continue to run as per usual, probably even improve, but sooner or later the announcement comes that it's being shut down. There goes the tool you've relied on for years. If the tool happens to be a social one, where you've had to convince your friends or colleagues to use it, then you are doubly-burned.&lt;/p&gt;
&lt;p&gt;You may have seen the recent news that Keybase has been acquired by Zoom. If you haven't heard of them before, Keybase links your social accounts to a Keybase identity in a cryptographically provable way so that people can verify you are who you say you are. On top of that, they also offer end-to-end encrypted chat and secure file storage.&lt;/p&gt;
&lt;p&gt;This is looking like an acqui-hire and is probably a good thing for Zoom and Keybase employees. However, if it is an acqui-hire then it's quite likely the Keybase product will be shut down eventually. I hope this isn't the case as Keybase is a great product. However, this is unfortunately an all-too-common exit mode for centralised, closed source systems and while it may be ultimately very profitable for the company being acquired, it very often leaves the users in the lurch. If you (the user) are relying on a particular server to function (or DNS itself) then the product you are using can be taken away from you permanently (or temporarily for that matter) by buying or influencing the owners of that server, or simply blocking them on a network level.&lt;/p&gt;
&lt;p&gt;This is why I'm very careful about what new services or software I sign up to. Life is too short! If the software satisfies the following then it has some built-in defences -&lt;/p&gt;
&lt;p&gt;1) &lt;strong&gt;Open-source&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If the software is open-source then, if you really wanted to, you could host your own version of it, or pay someone to set it up for you. Note that this means both the clients and the server need to be open-source. If only the clients are open-source, then you are still locked in and dependent.&lt;/p&gt;
&lt;p&gt;2) &lt;strong&gt;Allows data export&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Being able to self-host is of limited benefit if you can't also export your existing data from the platform. This ties into the broader issue of data ownership.&lt;/p&gt;
&lt;p&gt;3) &lt;strong&gt;Decentralized&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If a service is actually decentralized (not just federated) then you don't depend on a central server at all. In this case you don't actually need to "export" your data, you just migrate server. Ideally, migrating to a different server doesn't mean you lose any social data, or have to tell your friends etc - this is true if your identity is independent of your hosting server. &lt;/p&gt;
&lt;p&gt;4) &lt;strong&gt;Viable business model with paying users&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally, if a service has a viable business model where users are paying, then the interests of the business and the users are much more aligned. Contrast that with advertising-based businesses where third-party advertisers and user data are key to revenue.&lt;/p&gt;
&lt;p&gt;It may still be premature to say we're losing Keybase, and I hope Zoom listens to the Keybase user community and keeps on offering and developing this product. In the meantime, if any Keybase users are now looking for a replacement storage service - one that has all these defences built-in - have a look around our site and make yourself at home!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>The perfect social network</title><link href="https://peergos.gitlab.io/website/posts/perfect-social-network" rel="alternate"></link><published>2020-01-11T00:00:00+00:00</published><updated>2020-01-11T00:00:00+00:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2020-01-11:/website/posts/perfect-social-network</id><summary type="html">&lt;p&gt;What do most people want in a social network? We all have different ideas, but is it possible to have a set of features that makes everyone happy? We think so!&lt;/p&gt;
&lt;p&gt;This is the Peergos list of &lt;strong&gt;user-focused&lt;/strong&gt; requirements for the Perfect Social Network:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sharing media&lt;/strong&gt; of any size with …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;What do most people want in a social network? We all have different ideas, but is it possible to have a set of features that makes everyone happy? We think so!&lt;/p&gt;
&lt;p&gt;This is the Peergos list of &lt;strong&gt;user-focused&lt;/strong&gt; requirements for the Perfect Social Network:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sharing media&lt;/strong&gt; of any size with any number of people, including "the public".&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Universal login&lt;/strong&gt; - logging in on any device (even when all devices have been lost).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unique usernames&lt;/strong&gt; (human-memorable).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Location-independent identity&lt;/strong&gt; - users should be able to change hosting provider without losing data or friends.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Offline&lt;/strong&gt; functionality - the ability for many functions to continue to work offline.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private data&lt;/strong&gt; - the users decide who sees their posts, and the platform, as well as any server operators, can’t access them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Private metadata&lt;/strong&gt; (including the social graph - who connects with whom and when).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Post-quantum&lt;/strong&gt; (safe if a large quantum computer is built).&lt;/li&gt;
&lt;li&gt;Free from &lt;strong&gt;targetted ads&lt;/strong&gt;, or an engagement/outrage-optimised &lt;strong&gt;algorithmic feed&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Fine grained &lt;strong&gt;access control&lt;/strong&gt; - the user can restrict visibility of individual posts.&lt;/li&gt;
&lt;li&gt;The ability to delete or &lt;strong&gt;modify data&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Self-hostable&lt;/strong&gt; - for those who want more control, whilst still interacting with everyone else.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So why do we think these points are important?&lt;/p&gt;
&lt;p&gt;They fall into three broad categories: convenience, privacy and control.&lt;/p&gt;
&lt;h2 id="convenience"&gt;Convenience&lt;/h2&gt;
&lt;p&gt;This one’s critical - if something isn't convenient, then most people won't use it. But what do we mean by convenience?&lt;/p&gt;
&lt;p&gt;For instance, we are used to having unique usernames on services like email, Twitter, Instagram etc. This enables everyone to unambiguously find friends via a human-memorable name; it also gives an entry point to log in from anywhere. At the moment, many architectures rely on generating keys on each device, and require an existing device to authorise a new one (e.g. Signal). However, this means you cannot log in if you lose all your devices.&lt;/p&gt;
&lt;p&gt;How many times have you switched email addresses and had to tell all your contacts about it? A location-independent identity means that we are free to choose where our data is stored, and move providers without any loss of data and whilst maintaining our full social graph.&lt;/p&gt;
&lt;p&gt;Can we still do anything if the internet is down? Is it possible to search old messages or write new posts without internet access? Most folks would love a social network with offline functionality.&lt;/p&gt;
&lt;p&gt;Finally, sharing large files. Unfortunately, this requirement rules out a lot of currently available architectures: in some popular social networks, sharing a 4 GB file with friends entails storing 4 GB on all their devices – and in append-only structures (i.e. ones you can only add to, never remove from) these files can't even be deleted!&lt;/p&gt;
&lt;h2 id="privacy"&gt;Privacy&lt;/h2&gt;
&lt;p&gt;Privacy is a fundamental human right, and the best way to protect it online is with &lt;a href="https://en.wikipedia.org/wiki/End-to-end_encryption"&gt;end-to-end encryption&lt;/a&gt; of all data. Beyond that, to maintain freedom of association, we need to also safeguard metadata, in particular the social graph – i.e. not only protect what you send, but also what size, to whom and when. The need for full protection rules out protocols that expose lots of data and metadata to both the server administrators and the rest of the network (e.g. ActivityPub).&lt;/p&gt;
&lt;p&gt;Privacy isn't very good if it is temporary. Given the possibility of a large quantum computer being built, it is important for any privacy-focused protocol to plan for it.&lt;/p&gt;
&lt;h2 id="control"&gt;Control&lt;/h2&gt;
&lt;p&gt;Many users would like more control over their data online, especially in social networks – and control comes in different flavours.&lt;/p&gt;
&lt;p&gt;Control over your own social feed means that you cannot be manipulated by the platform or its advertisers (as seen in recent elections!). Ideally this is not just a promise by the network operator, but a property enforced by design.&lt;/p&gt;
&lt;p&gt;Fine-grained access control allows users to do what they do naturally in life – control the flow of their information, whether it's private communication with a friend, or keeping work, family and friends separate.&lt;/p&gt;
&lt;p&gt;Control over modifying or deleting data allows us to be, well, human. People frequently make mistakes and might want to modify something, or simply clear up some space.&lt;/p&gt;
&lt;p&gt;And for those who want Even More Control, the system must be self-hostable. This also keeps the platform honest - a non-self-hostable (centralized) platform can do whatever it wants, and users have no choice but to accept any changes or leave the network entirely. To allow for self-hosting, the platform should be fully open source, including any server code.&lt;/p&gt;
&lt;p&gt;At Peergos, we &lt;em&gt;already&lt;/em&gt; tick the above boxes, except offline functionality and post-quantum – both of which are partial ticks and in progress. Currently we look more like a global social file system, but we will be adding a more traditional social feed in the future. Watch this space for more progress reports!&lt;/p&gt;
&lt;p&gt;Do you agree with our list? What is YOUR perfect social network like? Tweet us at &lt;a href="https://twitter.com/peergos"&gt;@peergos&lt;/a&gt; with your ideas!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Atomic access control</title><link href="https://peergos.gitlab.io/website/posts/atomic-access-control" rel="alternate"></link><published>2019-11-15T00:00:00+00:00</published><updated>2019-11-15T00:00:00+00:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-11-15:/website/posts/atomic-access-control</id><summary type="html">&lt;p&gt;At Peergos we care deeply about your privacy, and the core of privacy is access control. Controlling who can see what. We've made some big improvements in this area for our new &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.1.4"&gt;v0.1.4&lt;/a&gt; release, so let's learn some more about them.&lt;/p&gt;
&lt;p&gt;We have totally rewritten our access revocation …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At Peergos we care deeply about your privacy, and the core of privacy is access control. Controlling who can see what. We've made some big improvements in this area for our new &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.1.4"&gt;v0.1.4&lt;/a&gt; release, so let's learn some more about them.&lt;/p&gt;
&lt;p&gt;We have totally rewritten our access revocation implementation. Previously there were some issues with nested write access which could cause data loss. Now in the new version, revoking write access is a single pass over the files and directories you are revoking access to, rather than 3. We've also made it atomic. This means your machine can crash at any point and your file system is in a consistent state with all data present. &lt;/p&gt;
&lt;p&gt;Similar improvements have been made to revoking read access and we are working on fuzzing the access control mechanism to further assure correctness and safety. While we had the hood popped open, we also removed unnecessary reloads of the current directory which has made the web interface &lt;em&gt;much snappier&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="New public link UI" class="class" id="id" src="/theme/img/blog/new-public-link-ui.png" width="50%" /&gt;
&lt;br/&gt;
&lt;b&gt;New&lt;/b&gt; public link UI for https://alpha.peergos.net/public/peergos/releases
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;We also have a secret to share with you - we have a mechanism for making files public, though it is not added to the web interface yet. Each user can choose to publish a capability to a file or folder that is readable to anyone. The mechanism for this is each user publishing a merkle &lt;a href="https://blog.acolyer.org/2015/11/27/hamt/"&gt;CHAMP&lt;/a&gt; root, which is a lookup from path to capability. This is currently only used by the "peergos" user for releases of Peergos itself: &lt;a href="https://alpha.peergos.net/public/peergos/releases"&gt;https://alpha.peergos.net/public/peergos/releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="New public link UI" class="class" id="id" src="/theme/img/blog/old-public-link-ui.png" width="50%" /&gt;
&lt;br/&gt;
&lt;b&gt;Old&lt;/b&gt; public link UI for https://alpha.peergos.net/public/peergos/releases
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Prior to this release, public files were decrypted server side after retrieving the capability from this CHAMP and delivered directly to the requestor. Clearly if we allowed anyone to use the feature then it would be a trivial cross-site-scripting (XSS) vector. So, in preparation for allowing all users to publicly share files, we now make the server retrieve the capability, and then do a http redirect to a "secret link" to that file. This means we get the full Peergos interface for navigating, viewing and downloading public files, and removes the potential for XSS attacks. The file or directory then becomes accessible under the human readable url&lt;/p&gt;
&lt;p&gt;&lt;em&gt;https://alpha.peergos.net/public/$path-to-file&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Head on over to the &lt;a href="https://alpha.peergos.net"&gt;alpha&lt;/a&gt; and enjoy your improved access control!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Peergos release v0.1.3</title><link href="https://peergos.gitlab.io/website/posts/release-v0.1.3" rel="alternate"></link><published>2019-09-15T00:00:00+01:00</published><updated>2019-09-15T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-09-15:/website/posts/release-v0.1.3</id><summary type="html">&lt;p&gt;We've been hard at work, so hard in fact that we're only now writing another blog post. We've sped everything up, enabled native builds, added garbage collection, added S3 storage support and fixed several bugs.&lt;/p&gt;
&lt;p&gt;Everything in this post is contained in our latest release, &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.1.3"&gt;v0.1.3&lt;/a&gt;, which you …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We've been hard at work, so hard in fact that we're only now writing another blog post. We've sped everything up, enabled native builds, added garbage collection, added S3 storage support and fixed several bugs.&lt;/p&gt;
&lt;p&gt;Everything in this post is contained in our latest release, &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.1.3"&gt;v0.1.3&lt;/a&gt;, which you can try out on our &lt;a href="https://alpha.peergos.net"&gt;alpha server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The most obvious change is that we've sped most things up by &lt;em&gt;~2.5X&lt;/em&gt;, notably uploads and downloads. Our download speeds are now comparable to Dropbox, despite the extra overhead of decryption!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Faster downloads" class="class" id="id" src="/theme/img/cheetah.webp" width="50%" /&gt;
&lt;br/&gt;
2.5X faster downloads
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The next big feature is &lt;em&gt;transaction-aware garbage collection&lt;/em&gt;. This is critical to ensure our disks don't unnecessarily fill up.&lt;/p&gt;
&lt;p&gt;If you change 1 byte of a file bigger than 5 MiB, then we reencrypt that 5 MiB section of file. The new cipher text for this section has nothing in common with the old cipher text (otherwise it wouldn't be very good encryption!!). This means that now 5 MiB of blocks are unused and wasting space. Eventually, with enough modifications you'd fill up the disk with all this garbage.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Too much garbage" class="class" id="id" src="/theme/img/garbage.webp" width="50%" /&gt;
&lt;br/&gt;
Too much garbage
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The operation that cleans up these unreferenced blocks of data is called garbage collection. The difficult part is making sure we don't garbage collect data that someone is in the middle of writing (before they commit it). At the moment, this is achieved with a process wide lock. Once &lt;a href="https://ipfs.io"&gt;IPFS&lt;/a&gt; implements &lt;a href="https://github.com/ipfs/notes/issues/106"&gt;native transactions&lt;/a&gt; we can remove this global lock and get much better throughput.&lt;/p&gt;
&lt;p&gt;The next addition was &lt;em&gt;statically compiled native binaries&lt;/em&gt;. Until now, to run Peergos yourself you had to independently install Java, which is ~100 MiB. This is an extra barrier that makes it harder to use, and which some people aren't willing to do. The native builds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;are smaller in total size (32 MiB compared to a 13 MiB jar plus a 100 MiB JVM);&lt;/li&gt;
&lt;li&gt;use much less RAM than a full JVM;&lt;/li&gt;
&lt;li&gt;start much faster than a JVM (4 ms compared to 660 ms).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last feature in particular enables us to have an interactive command line interface which doesn't require running a daemon. We'll be writing more about this soon! The only negative of native image builds is we don't yet have &lt;a href="https://github.com/oracle/graal/issues/291"&gt;reproducible builds&lt;/a&gt; for it.&lt;/p&gt;
&lt;p&gt;The final feature in this release is support for using an &lt;em&gt;S3 compatible&lt;/em&gt; service for data storage instead of the local hard disk.&lt;/p&gt;
&lt;p&gt;As well as all these new features we've fixed a host of bugs in both the server and the client. So head on over to &lt;a href="https://alpha.peergos.net"&gt;our alpha&lt;/a&gt; and check it out!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Applications on Peergos</title><link href="https://peergos.gitlab.io/website/posts/applications" rel="alternate"></link><published>2019-08-20T00:00:00+01:00</published><updated>2019-08-20T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-08-20:/website/posts/applications</id><summary type="html">&lt;p&gt;They're here - the first apps for Peergos!&lt;/p&gt;
&lt;p&gt;The first application we've made available is a read-only viewer for PDF files.
This is a super-simple app which adds very useful functionality to Peergos. Now
you can securely and privately read PDF files within Peergos. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="PDF Viewer" class="class" id="id" src="/theme/img/pdf-viewer.png" width="80%" /&gt;
&lt;br/&gt;
PDF Viewer
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The second app we've enabled …&lt;/p&gt;</summary><content type="html">&lt;p&gt;They're here - the first apps for Peergos!&lt;/p&gt;
&lt;p&gt;The first application we've made available is a read-only viewer for PDF files.
This is a super-simple app which adds very useful functionality to Peergos. Now
you can securely and privately read PDF files within Peergos. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="PDF Viewer" class="class" id="id" src="/theme/img/pdf-viewer.png" width="80%" /&gt;
&lt;br/&gt;
PDF Viewer
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The second app we've enabled is an editor for text or code. We support plain
text, markdown, and major programming languages like Java, Go, Rust,
Javascript, HTML, etc. This is huge! You can use the text editor as a secure
password manager, a to do list and more! &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Editor" class="class" id="id" src="/theme/img/editor.png" width="80%" /&gt;
&lt;br/&gt;
Text/Markdown/Code editor
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;These great new features are made possible by a technique we've recently
discovered. The key component is a sandboxed iframe. Browsers now let you lock
down code in an iframe so that it can't communicate to the outside world (i.e. can't
make AJAX requests) and is totally isolated from the parent web page. The
isolation provided by the sandboxed iframe is absolutely critical to us because
when you are logged in, your keys are stored in memory and must be protected
from any potentially malicious code. We can run untrusted code in a sandboxed
iframe which only lets you render HTML, CSS, run Javascript, and send and
receive specific messages to and from the parent. This messaging API keeps
privileged code and keys separate from the application running inside the
iframe. &lt;/p&gt;
&lt;p&gt;For the PDF viewer, we simply imported
&lt;a href="https://github.com/mozilla/pdf.js/"&gt;pdf.js&lt;/a&gt; from Mozilla and implemented
a one-way message from the external context which sends the content of the PDF
to render. For the text editor, we used a great library called
&lt;a href="https://github.com/codemirror/codemirror"&gt;Codemirror&lt;/a&gt;. This app
required a slightly more complicated protocol than the one-way message
system of the PDF viewer. We just needed a message to send the modified content
back to the external context, and the privileged code could then save the
modified file contents.&lt;/p&gt;
&lt;p&gt;One of our goals has been to enable third party applications inside Peergos.
These would be apps which you can choose to install and grant permissions to
using the strong authentication, encryption and access control in Peergos, but
which run in a strict sandbox. Eventually we want to allow users to edit HTML
and Javascript files directly in a folder in Peergos and declare it as an
application. This would give users a live editing environment, easy publishing,
and &lt;em&gt;auditable proofs&lt;/em&gt; of the authorship of apps. You could even host your
website directly in Peergos and edit it in place!&lt;/p&gt;
&lt;p&gt;Before we open up the sandbox to truly untrusted apps, there is one
 prerequisite. Currently, browsers don't put sandboxed iframes into a different
 operating system process, which is necessary to be fully protected from CPU
 vulnerabilities such as Spectre or Meltdown. Both Firefox and Chrome are in
 the process of moving iframes to separate processes and once that lands, we
 can enable 100% safe sandboxes for Peergos applications! &lt;/p&gt;
&lt;p&gt;In the meantime we can use it to curate semi-trusted apps like the PDF viewer
 and text editor. We'd love to hear what you use the text editor for!&lt;/p&gt;
&lt;p&gt;Happy Peergossing!&lt;/p&gt;
&lt;p&gt;-The Peergos team&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Fast seeking and encrypted history</title><link href="https://peergos.gitlab.io/website/posts/fast-seeking" rel="alternate"></link><published>2019-08-01T00:00:00+01:00</published><updated>2019-08-01T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-08-01:/website/posts/fast-seeking</id><summary type="html">&lt;p&gt;Another week, another set of cool new Peergos features. We've been hard at work and wanted to tell you about our latest new features: super fast seeking within a file, encrypted history (fix the back button), and storage usage and quota display. &lt;/p&gt;
&lt;p&gt;Imagine you were watching a long movie in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Another week, another set of cool new Peergos features. We've been hard at work and wanted to tell you about our latest new features: super fast seeking within a file, encrypted history (fix the back button), and storage usage and quota display. &lt;/p&gt;
&lt;p&gt;Imagine you were watching a long movie in Peergos using our built in streaming video player, and wanted to skip ahead to where you left off last time, around two hours in. Previously this involved downloading the encrypted metadata for every 5MiB chunk of the file (a few network requests), decrypting the location of the next chunk, and repeating this until you reach the desired offset. The links between the chunks are encrypted so that the outside world (or the server) can't deduce the size of your files. This was SLOOOOOW. To seek a gigabyte or so in took about 5 minutes, or more depending on your internet connection latency! No one wants to wait around that long. so we came up with a new scheme for deterministic, but still private subsequent chunk locations. Before this change each chunk location was 32 random bytes. In the new scheme we calculate the location of a subsequent chunk as the following, where the secret is 32 random bytes that are stored in the encrypted metadata of the first chunk of the file:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;b&gt;next location = sha256 hash(current location + secret)&lt;/b&gt;&lt;br/&gt;
How we now calculate the locations of later parts of a file
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;This means that to seek ahead we don't need to do &lt;em&gt;any&lt;/em&gt; IO at all. We just do a bunch of hashing locally. This is ridiculously fast and doesn't leak to the world the connections between your chunks. We can now seek many gigabytes into a file in about 5s, which is mostly the time to retrive the eventual chunk of the file.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;video src="theme/video/mind-blown.mp4" width="400px" controls="true"&gt;&lt;/video&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
http://localhost:8000/#{%22nonce%22:%22hl6U6X/ytjRGT+pi5wmJFq...,%22ciphertext%22:%22oK9JAGotzDOELvIon...}
&lt;br/&gt;
A URL with the encrypted path in the fragment.
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The second feature this week is encrypted history. Until now, if you press the browser back button you get logged out of Peergos. Super annoying! Now, every time you change directory we store the path, padded and encrypted, in the url fragment. If we didn't encrypt it then there'd be a log of every directory you visited in your browser history. The other requirement is that we catch changes to the url (e.g. caused by pressing the back button) and try to decrypt and interpet the resulting path. This makes navigation much more intuitive.&lt;/p&gt;
&lt;p&gt;We also add to the history if you open a file in Peergos, and if you log in through one of these links then we will restore you to the correct directory, and open any file you had open. This allows you to store "deep bookmarks" to things in Peergos which don't reveal anything to someone who get's access you your bookmarks!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Space usage display" class="class" height="20%" id="id" src="/theme/img/peergos-usage.png" width="400px" /&gt;
&lt;br/&gt;
Space usage display
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The third feature is a display of your current space usage and allowance. This lets you see at a glance how close to your limit you are, and you can request more from the admin for your storage node. That could be a friend who's running a Peergos server for you and gives you more storage for free. Or later down the line we will add the ability for a hosting provider to charge money for storage. After you've requested more storage an admin can approve it next time they log in.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Request more space" class="class" height="20%" id="id" src="/theme/img/peergos-request-storage.png" width="400px" /&gt;
&lt;br/&gt;
Request more space
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;These features are already live on the &lt;a href="https://alpha.peergos.net"&gt;alpha server&lt;/a&gt;, and in the &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.1.0/"&gt;latest release&lt;/a&gt; so go check it out!&lt;/p&gt;
&lt;p&gt;Happy Peergossing!&lt;/p&gt;
&lt;p&gt;-The Peergos team&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>IPFS Camp, new features</title><link href="https://peergos.gitlab.io/website/posts/ipfs-camp" rel="alternate"></link><published>2019-07-16T00:00:00+01:00</published><updated>2019-07-16T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-07-16:/website/posts/ipfs-camp</id><summary type="html">&lt;p&gt;At Peergos we care deeply about your privacy and security online. We are super-excited to be building the future of the web where individuals have total control over their data, and who can see it. This is why we prioritised getting a full &lt;a href="https://peergos.org/blog#security_audit_june_2019_"&gt;security audit&lt;/a&gt; and why we continue to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At Peergos we care deeply about your privacy and security online. We are super-excited to be building the future of the web where individuals have total control over their data, and who can see it. This is why we prioritised getting a full &lt;a href="https://peergos.org/blog#security_audit_june_2019_"&gt;security audit&lt;/a&gt; and why we continue to build a privacy-first platform where you grant applications and people access only to the data you want them to have. &lt;/p&gt;
&lt;p&gt;Recently we attended the inaugural &lt;a href="https://camp.ipfs.io"&gt;IPFS camp&lt;/a&gt; organised by &lt;a href="https://protocol.ai"&gt;Protocol labs&lt;/a&gt; from 27th-30th June. Set in magnificent surroundings in the Barcelonian hills, the situation was primed for productivity with 160 pioneers of the decentralised web gathered to meet, discuss, learn and solve. The schedule was packed, with core courses, electives, lightning talks, deep dives, unconf sessions and a sci-fi fair. It was a great experience and hugely useful for Peergos and our mission.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="The deepdive trophy" class="class" height="20%" id="id" src="/theme/img/deepdive.jpeg" width="200px" /&gt;
&lt;br/&gt;
Best deep dive trophy
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Our team member Jonathan and his group won the best deep dive, for a product analysis of Peergos. This deep dive was a guided user testing of Peergos which resulted in a ton of feedback and suggestions. One of the suggestions was to implement friend verification in person or over the phone via a qr code or safety number. In fact, one member of the group said they would pay right now for Peergos if it had this feature! So now, a few weeks later, we present friend verification! It works directly from the browser using the webcam, including on mobile. Just scan your friends qr code in person for an added layer of confidence!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Verification" class="class" height="50%" id="id" src="/theme/img/verification.png" width="300px" /&gt;
&lt;br/&gt;
QR code based verification of friends
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;We already have many defenses against a man-in-the-middle attack including mirrored append-only certificate transparency for all user identities, but this adds another layer for the hyper paranoid users. &lt;/p&gt;
&lt;p&gt;Another suggestion from our deep dive was that uploading a folder should work. We've attempted this in the past but hit problems with the browser APIs. However, now we have solved the problems and you can drag and drop a folder into Peergos and it will recusively upload all its contents!&lt;/p&gt;
&lt;p&gt;These features are already live on the &lt;a href="https://alpha.peergos.net"&gt;alpha server&lt;/a&gt;, and in the &lt;a href="https://alpha.peergos.net/public/peergos/releases/v0.0.11/"&gt;latest release&lt;/a&gt; so go check it out!&lt;/p&gt;
&lt;p&gt;We also had a great deep dive session with &lt;a href="https://twitter.com/berty"&gt;Berty&lt;/a&gt; on a secure decentralised group chat protocol. We were investigating if &lt;a href="https://messaginglayersecurity.rocks"&gt;Messaging Layer Security&lt;/a&gt; can be adapted to work in a more decentralised setting. Berty also &lt;a href="https://github.com/ipfs/camp/raw/master/LIGHTNING_TALKS/ipfscamp2019-lightningtalk-bluetoothle.pdf"&gt;presented&lt;/a&gt; their implementation of a &lt;a href="https://libp2p.io"&gt;libp2p&lt;/a&gt; transport over bluetooth low energy. Very cool!&lt;/p&gt;
&lt;p&gt;Until next time, happy Peergossing!&lt;/p&gt;
&lt;p&gt;-The Peergos team&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Alpha Release</title><link href="https://peergos.gitlab.io/website/posts/alpha-release" rel="alternate"></link><published>2019-06-20T00:00:00+01:00</published><updated>2019-06-20T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-06-20:/website/posts/alpha-release</id><summary type="html">&lt;p&gt;The time you've all been waiting for has arrived... The &lt;em&gt;Peergos alpha&lt;/em&gt; is now officially open! You can now have your own private shareable space online. &lt;/p&gt;
&lt;p&gt;We have a strictly limited number of accounts on our alpha available for free with an initial 200MB of storage, so get in fast …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The time you've all been waiting for has arrived... The &lt;em&gt;Peergos alpha&lt;/em&gt; is now officially open! You can now have your own private shareable space online. &lt;/p&gt;
&lt;p&gt;We have a strictly limited number of accounts on our alpha available for free with an initial 200MB of storage, so get in fast. All we ask in return is that you use it and tell us what we can improve. You can do this in Peergos itself using the feedback button, on &lt;a href="https://reddit.com/r/peergos"&gt;Reddit&lt;/a&gt;, or via &lt;a href="mailto:feedback@peergos.org"&gt;email&lt;/a&gt; or &lt;a href="https://twitter.com/peergos"&gt;Twitter&lt;/a&gt;. If you run out of space in Peergos then just message us and we'll increase your storage quota, subject to availability. &lt;/p&gt;
&lt;p&gt;Some things to bear in mind:&lt;br/&gt;
&lt;ol&gt;&lt;li&gt; We haven't had an external security audit (coming soon), so we advise you not to store anything sensitive in Peergos yet.&lt;/li&gt;&lt;li&gt; For now, we recommend Chrome for files larger than 50MB. We'd love to be able to recommend Firefox, but they haven't implemented a &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1474543"&gt;critical feature&lt;/a&gt; we need to safely stream from encrypted data.&lt;/li&gt;&lt;li&gt; There are still a lot of rough edges and things that can be optimised, but we wanted to get it out there and start getting feedback on what people actually want, now that the foundations are in place. &lt;/li&gt;&lt;/ol&gt;&lt;/p&gt;
&lt;p&gt;You can &lt;a href="https://alpha.peergos.net?signup=true"&gt;sign up to the alpha here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Happy sharing!&lt;/p&gt;
&lt;p&gt;The Peergos Team&lt;br/&gt;&lt;br/&gt;
Twitter: &lt;a href="https://twitter.com/peergos"&gt;@peergos&lt;/a&gt;&lt;br/&gt;
Reddit: &lt;a href="https://reddit.com/r/peergos"&gt;https://reddit.com/r/peergos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Peergos" class="class" height="20%" id="id" src="/theme/img/logo.png" width="20%" /&gt;
&lt;/center&gt;&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Security Audit</title><link href="https://peergos.gitlab.io/website/posts/security-audit" rel="alternate"></link><published>2019-06-12T00:00:00+01:00</published><updated>2019-06-12T00:00:00+01:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-06-12:/website/posts/security-audit</id><summary type="html">&lt;p&gt;Thanks to some very generous support from &lt;a href="https://protocol.ai/"&gt;Protocol Labs&lt;/a&gt; we have had our first security audit! We contracted the firm &lt;a href="https://cure53.de/"&gt;Cure53&lt;/a&gt; to give us a large scale security asessment of our cryptography, protocols, architecture and code. We're extremely pleased to be able to announce that no fundamental architectural or cryptographic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to some very generous support from &lt;a href="https://protocol.ai/"&gt;Protocol Labs&lt;/a&gt; we have had our first security audit! We contracted the firm &lt;a href="https://cure53.de/"&gt;Cure53&lt;/a&gt; to give us a large scale security asessment of our cryptography, protocols, architecture and code. We're extremely pleased to be able to announce that no fundamental architectural or cryptographic problems were found, and all the issues that were found have been fixed.&lt;/p&gt;
&lt;p&gt;This means that you can rest assured that your data is safe with Peergos. &lt;/p&gt;
&lt;p&gt;Read the &lt;a href="https://cure53.de/pentest-report_peergos.pdf"&gt;full report here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Peergos" class="class" height="20%" id="id" src="/theme/img/logo.png" width="20%" /&gt;
&lt;/center&gt;&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Development update</title><link href="https://peergos.gitlab.io/website/posts/dev-update" rel="alternate"></link><published>2019-02-28T00:00:00+00:00</published><updated>2019-02-28T00:00:00+00:00</updated><author><name>Peergos team</name></author><id>tag:peergos.gitlab.io,2019-02-28:/website/posts/dev-update</id><summary type="html">&lt;p&gt;&lt;em&gt;This is our first development update since we started, in July 2013. For most of that period we've been working on Peergos for free in our spare time. Everything we do is &lt;a href="https://github.com/peergos/peergos"&gt;open source&lt;/a&gt; and pro bono - If you would like to support our development then please make a &lt;a href="https://liberapay.com/peergos"&gt;recurring …&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;This is our first development update since we started, in July 2013. For most of that period we've been working on Peergos for free in our spare time. Everything we do is &lt;a href="https://github.com/peergos/peergos"&gt;open source&lt;/a&gt; and pro bono - If you would like to support our development then please make a &lt;a href="https://liberapay.com/peergos"&gt;recurring donation of less than 100 euros per week&lt;/a&gt; or a &lt;a href="https://donorbox.org/peergos"&gt;larger one off donation&lt;/a&gt;.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;The browser's capabilities have come a long way since we started. Things that we can do now were not possible 5 years ago. The Inter-Planetary File system (&lt;a href="https://ipfs.io"&gt;IPFS&lt;/a&gt;) has come a long way in solving many of the peer-to-peer networking problems and laying a solid structural foundation to build on. That's why very early on after IPFS started we switched from our own networking and distributed hash table to IPFS, allowing us to focus on our core principles of privacy and security. &lt;/p&gt;
&lt;p&gt;Thanks to some very generous support from &lt;a href="https://protocol.ai/"&gt;Protocol Labs&lt;/a&gt; (the initial creators of IPFS) we have been able to accelerate development recently. We've released a bunch of cool new features and are much closer to our public alpha. Let's go through a few of the big ones. You can see the rest in more detail in our &lt;a href="https://book.peergos.org"&gt;book&lt;/a&gt;. &lt;/p&gt;
&lt;h3 id="decentralization"&gt;Decentralization&lt;/h3&gt;
&lt;p&gt;The first new feature is proper decentralization. Now you can self host your own Peergos instance and transparently interact with users on other servers, whilst being independent of the domain name system (DNS) and the SSL certificate authorities (central points of failure outside our control). You can even log in to your Peergos account through someone else's Peergos server. The Peergos interface can actually be entirely self hosted from within IPFS itself (i.e. you can log in through a standard ipfs instance rather than a Peergos instance)! This was all achieved with IPFS p2p streams. p2p streams are a new feature in IPFS which let you create a tcp socket between any two IPFS instances. This stream is end-to-end encrypted with secio. Secio is basically &lt;a href="https://en.wikipedia.org/wiki/Transport_Layer_Security"&gt;TLS&lt;/a&gt; with a different handshake because the end points are not location addressed - instead the addresses are the hash of each node's public key. Like all other IPFS connections, this stream will tunnel through NATs and firewalls transparently. &lt;/p&gt;
&lt;p&gt;We implemented a new http endpoint on the IPFS gateway which allows you to proxy a http request to any target IPFS instance (who is listening) using these p2p streams.&lt;/p&gt;
&lt;p&gt;This new endpoint is accessed through the gateway (after enabling it - it's an experimental feature for now) at:&lt;/p&gt;
&lt;p&gt;http://locahost:8080&lt;b&gt;/p2p/$ipfs-node-id/http/$path&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;For each such request, IPFS will open a p2p stream to $ipfs-node-id and proxy the request to it with a path of $path. Note that the $ipfs-node-id is the hash of the IPFS node's public key. How this works is illustrated below. The beauty of this http endpoint is you don't need to manually open p2p streams for every different endpointdestination, IPFS handles that for you automatically. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Proxying requests" class="class" height="90%" id="id" src="/theme/img/blog/proxy.svg" width="90%" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Using this key ingredient, we can separate out each user's data into their own server. Most of the data is already in IPFS, but a user's storage server is responsible for pinning it, and for storing the mutable pointers (our equivalent of IPNS), and pending follow requests. This means the only centralized component is the pki, which stores mappings from username to public identity key, and public storage server key. The job of the pki server is to ensure unique usernames and thus it is logically centralized, but we take various efforts to mitigate the effect of this. For example the pki is mirrored on every Peergos server. This has threefold benefits: first it allows users to do private lookups for friends' public keys without announcing to the network who they are looking up; second, it makes the whole system much more scalable - you only need to contact the real pki when you are signing up, or changing your identity or storage server; and third it improves resiliency, if the pki server were to permanently be taken down the network could move to a new one without any loss of data. The pki data itself is stored in IPFS as an append only data structure in a compressed hash array mapped trie (champ). &lt;/p&gt;
&lt;h3 id="granting-write-access"&gt;Granting write access&lt;/h3&gt;
&lt;p&gt;We've had the ability to grant read access for years, but only this year have we finally implemented granting write access to other users. Every write is signed by a signing keypair. Initially you only have one signing keypair for your entire filestystem, which means that to only grant write access to a subtree, it needs to be moved to a new signing keypair. To explain how this works we're going to take a few steps back. Every directory or 5 MiB section (chunk) of a file requires a unique &lt;a href="https://en.wikipedia.org/wiki/Capability-based_security"&gt;capability&lt;/a&gt; to access it consisting of:&lt;/p&gt;
&lt;p&gt;&lt;b&gt;(owner, signer, label, read base key, write base key)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Here the owner and signer are (hashes of) public signing keys, label is a random 32 byte label, and the read and write base keys are symmetric keys. If someone has the first 4, which amount to a location and a key, then they can read the file or folder that it points to. If they also have the write base key, then they can also make modifications.&lt;/p&gt;
&lt;p&gt;From a network visible point of view, every signing key pair points to a champ root (by signing the root). This champ is just a look up from the label to the value, which is a cryptree node. You can read more about cryptree in our &lt;a href="https://book.peergos.org/security/cryptree.html"&gt;book&lt;/a&gt;, or the &lt;a href="https://raw.githubusercontent.com/ianopolous/Peergos/master/papers/wuala-cryptree.pdf"&gt;original paper&lt;/a&gt; describing it. If the thing pointed to is a file, then the cryptree node itself will have merkle links to the encrypted fragments of the chunk. Remember that merkle links are just a hash that points to another ipfs object. This is illustrated below. &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="Champ" class="class" height="90%" id="id" src="/theme/img/blog/champ.svg" width="90%" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;When you grant write access to a file or folder then you are just revealing the write base key to them. This enables them to extract the private signing key and thus make modifications. Initially your entire filesystem is under the same signing key pair. This means were we to naively grant write access by sharing this key then the recipient could delete (though not read) all your files. To avoid this we first move the file or directory to which we want to grant write access to a new signing key pair. This allows us to only grant the friend write access to the particular part of our filesystem we want to share. Voila!&lt;/p&gt;
&lt;p&gt;If you grant write access to a folder, then that means that the recipient can upload new files or make new directories inside that folder, or delete all the contents. Granting write access to an individual file means the recipient can only modify that file.&lt;/p&gt;
&lt;h3 id="future-work"&gt;Future work&lt;/h3&gt;
&lt;p&gt;We have lots of work in the pipeline, so stay tuned! These include an in Peergos text editor, for a google docs like experience with collaborative editing, a secure messaging system inside Peergos and a sandbox and API for third-party applications inside Peergos. &lt;/p&gt;</content><category term="posts"></category></entry></feed>